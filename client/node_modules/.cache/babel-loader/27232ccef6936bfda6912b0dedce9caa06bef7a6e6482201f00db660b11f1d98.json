{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nexport const createComment = _ref => {\n  let {\n    post,\n    newComment,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    const newPost = {\n      ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    try {\n      const data = {\n        ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = {\n        ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = {\n        ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n\n      // todo socket\n      socket.emit(\"createComment\", newPost);\n\n      // todo notification\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply ? newComment.content : post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateComment = _ref2 => {\n  let {\n    comment,\n    post,\n    content,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComments = EditData(post.comments, comment._id, {\n      ...comment,\n      content\n    });\n    const newPost = {\n      ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeComment = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = {\n      ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = {\n      ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeComment = _ref4 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    const newComment = {\n      ...comment,\n      likes: DeleteData(comment.likes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = {\n      ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteComment = _ref5 => {\n  let {\n    post,\n    comment,\n    auth,\n    socket\n  } = _ref5;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = {\n      ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('deleteComment', newPost);\n    try {\n      deleteArr.forEach(item => {\n        deleteDataAPI(`comment/${item._id}`, auth.token);\n\n        // todo notification\n        const msg = {\n          id: item._id,\n          text: item.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n          recipients: item.reply ? [item.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","createNotify","removeNotify","postDataAPI","patchDataAPI","deleteDataAPI","createComment","_ref","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","_ref2","comment","newComments","likeComment","_ref3","likes","unLikeComment","_ref4","deleteComment","_ref5","deleteArr","filter","cm","find","da","forEach","item"],"sources":["C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/src/redux/actions/commentAction.js"],"sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\n\n\n\n\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\n    const newPost = {...post, comments: [...post.comments, newComment]};\n    \n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n    try {\n      const data = {\n        ...newComment,\n        postId: post._id,\n        postUserId: post.user._id,\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n\n      const newData = { ...res.data.newComment, user: auth.user };\n      const newPost = { ...post, comments: [...post.comments, newData] };\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n\n      // todo socket\n      socket.emit(\"createComment\", newPost);\n\n      // todo notification\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply\n          ? newComment.content\n          : post.content,\n        image: post.images[0].url,\n      };\n\n      dispatch(createNotify({ msg, auth, socket }));\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n    }\n};\n\n\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\n  const newComments = EditData(post.comments, comment._id, {...comment, content});\n  const newPost = {...post, comments: newComments};\n  \n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  try {\n    await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\n\n  } catch (err) {\n    dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n  }\n};\n\nexport const likeComment= ({comment, post, auth}) => async (dispatch) => {\n    const newComment = {...comment, likes: [...comment.likes, auth.user]};\n     const newComments = EditData(post.comments, comment._id, newComment);\n     const newPost = { ...post, comments: newComments };\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    try {\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n\n    }\n};\n\nexport const unLikeComment = ({ comment, post, auth }) => async (dispatch) => {\n  const newComment = { ...comment, likes: DeleteData(comment.likes, auth.user._id) };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post, comments: newComments };\n\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\n\nexport const deleteComment = ({ post, comment, auth, socket }) => async (dispatch) => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n\n  const newPost = {\n    ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  }\n\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  socket.emit('deleteComment', newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n\n      // todo notification\n      const msg = {\n        id: item._id,\n        text: item.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n      };\n\n      dispatch(removeNotify({ msg, auth, socket }));\n    })\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}