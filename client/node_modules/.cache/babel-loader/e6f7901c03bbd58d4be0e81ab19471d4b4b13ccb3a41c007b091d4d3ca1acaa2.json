{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nexport const MESSAGE_TYPES = {\n  ADD_USER: \"ADD_USER\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\n  GET_MESSAGES: \"GET_MESSAGES\"\n};\nexport const addUser = _ref => {\n  let {\n    user,\n    message\n  } = _ref;\n  return async dispatch => {\n    if (message.users.every(item => item._id !== user._id)) {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: {\n          ...user,\n          text: '',\n          media: []\n        }\n      });\n    }\n  };\n};\nexport const addMessage = _ref2 => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    socket.emit('addMessage', msg);\n    try {\n      await postDataAPI('message', msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = _ref3 => {\n  let {\n    auth,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({\n              ...cv,\n              text: item.text,\n              media: item.media\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessages = _ref4 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      dispatch({\n        type: MESSAGE_TYPES.GET_MESSAGES,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","getDataAPI","MESSAGE_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","addUser","_ref","user","message","dispatch","users","every","item","_id","type","payload","text","media","addMessage","_ref2","msg","auth","socket","emit","token","err","ALERT","error","response","data","getConversations","_ref3","page","res","newArr","conversations","forEach","recipients","cv","push","result","getMessages","_ref4","id"],"sources":["C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/src/redux/actions/messageAction.js"],"sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\nexport const MESSAGE_TYPES = {\r\n  ADD_USER: \"ADD_USER\",\r\n  ADD_MESSAGE: \"ADD_MESSAGE\",\r\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\r\n  GET_MESSAGES: \"GET_MESSAGES\",\r\n};\r\n\r\nexport const addUser = ({ user, message }) => async (dispatch) => {\r\n    if(message.users.every(item => item._id !== user._id)){\r\n        dispatch({type: MESSAGE_TYPES.ADD_USER, payload: {...user, text: '', media: []} });\r\n    }\r\n};\r\n\r\nexport const addMessage = ({ msg, auth, socket }) => async (dispatch) => {\r\n\r\n  dispatch({type: MESSAGE_TYPES.ADD_MESSAGE, payload: msg});\r\n  socket.emit('addMessage', msg);\r\n\r\n  try {\r\n    await postDataAPI('message', msg, auth.token)\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1 }) => async (dispatch) => {\r\ntry {\r\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\r\n    let newArr = [];\r\n    res.data.conversations.forEach(item => {\r\n      item.recipients.forEach(cv => {\r\n        if(cv._id !== auth.user._id){\r\n          newArr.push({...cv, text: item.text, media: item.media});\r\n        }\r\n      })\r\n    });\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_CONVERSATIONS, payload: {newArr, result: res.data.result} });\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport const getMessages = ({ auth, id, page = 1 }) => async (dispatch) => {\r\n  try {\r\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_MESSAGES, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}