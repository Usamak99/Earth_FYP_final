{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar transports = require(\"./transports/index\");\nvar Emitter = require(\"component-emitter\");\nvar debug = require(\"debug\")(\"engine.io-client:socket\");\nvar parser = require(\"engine.io-parser\");\nvar parseuri = require(\"parseuri\");\nvar parseqs = require(\"parseqs\");\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  function Socket(uri) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? 443 : 80);\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {}\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = parseqs.decode(_this.opts.query);\n    }\n\n    // set on handshake\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null;\n\n    // set on heartbeat\n    _this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      addEventListener(\"beforeunload\", function () {\n        if (_this.transport) {\n          // silently close the transport\n          _this.transport.removeAllListeners();\n          _this.transport.close();\n        }\n      }, false);\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\");\n        };\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n    _this.open();\n    return _this;\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = clone(this.opts.query);\n\n      // append engine.io protocol identifier\n      query.EIO = parser.protocol;\n\n      // transport name\n      query.transport = name;\n\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new transports[name](opts);\n    }\n\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var transport;\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        var self = this;\n        setTimeout(function () {\n          self.emit(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n      this.readyState = \"opening\";\n\n      // Retry with the next transport if the transport is disabled (jsonp: false)\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n      transport.open();\n      this.setTransport(transport);\n    }\n\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      debug(\"setting transport %s\", transport.name);\n      var self = this;\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      }\n\n      // set up transport\n      this.transport = transport;\n\n      // set up transport listeners\n      transport.on(\"drain\", function () {\n        self.onDrain();\n      }).on(\"packet\", function (packet) {\n        self.onPacket(packet);\n      }).on(\"error\", function (e) {\n        self.onError(e);\n      }).on(\"close\", function () {\n        self.onClose(\"transport close\");\n      });\n    }\n\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name, {\n        probe: 1\n      });\n      var failed = false;\n      var self = this;\n      Socket.priorWebsocketSuccess = false;\n      function onTransportOpen() {\n        if (self.onlyBinaryUpgrades) {\n          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n          failed = failed || upgradeLosesBinary;\n        }\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            self.upgrading = true;\n            self.emit(\"upgrading\", transport);\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', self.transport.name);\n            self.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === self.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              self.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              self.emit(\"upgrade\", transport);\n              transport = null;\n              self.upgrading = false;\n              self.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\");\n            err.transport = transport.name;\n            self.emit(\"upgradeError\", err);\n          }\n        });\n      }\n      function freezeTransport() {\n        if (failed) return;\n\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n\n      // Handle any error that happens while probing\n      function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        self.emit(\"upgradeError\", error);\n      }\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      }\n\n      // Remove all listeners on the transport and on self\n      function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        self.removeListener(\"close\", onclose);\n        self.removeListener(\"upgrading\", onupgrade);\n      }\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api public\n     */\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emit(\"open\");\n      this.flush();\n\n      // we check for `readyState` in case an `open`\n      // listener already closed the socket\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emit(\"packet\", packet);\n\n        // Socket is live - any packet counts\n        this.emit(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emit(\"pong\");\n            break;\n          case \"error\":\n            var err = new Error(\"server error\");\n            err.code = packet.data;\n            this.onError(err);\n            break;\n          case \"message\":\n            this.emit(\"data\", packet.data);\n            this.emit(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} handshake obj\n     * @api private\n     */\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emit(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this2 = this;\n      clearTimeout(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = setTimeout(function () {\n        _this2.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen);\n\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this.prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emit(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n        this.transport.send(this.writeBuffer);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this.prevBufferLen = this.writeBuffer.length;\n        this.emit(\"flush\");\n      }\n    }\n\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emit(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n\n    /**\n     * Closes the connection.\n     *\n     * @api private\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var self = this;\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      function close() {\n        self.onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        self.transport.close();\n      }\n      function cleanupAndClose() {\n        self.removeListener(\"upgrade\", cleanupAndClose);\n        self.removeListener(\"upgradeError\", cleanupAndClose);\n        close();\n      }\n      function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        self.once(\"upgrade\", cleanupAndClose);\n        self.once(\"upgradeError\", cleanupAndClose);\n      }\n      return this;\n    }\n\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emit(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, desc) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        var self = this;\n\n        // clear timers\n        clearTimeout(this.pingIntervalTimer);\n        clearTimeout(this.pingTimeoutTimer);\n\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n\n        // ensure transport won't stay open\n        this.transport.close();\n\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        }\n\n        // set ready state\n        this.readyState = \"closed\";\n\n        // clear session id\n        this.id = null;\n\n        // emit close event\n        this.emit(\"close\", reason, desc);\n\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        self.writeBuffer = [];\n        self.prevBufferLen = 0;\n      }\n    }\n\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }]);\n  return Socket;\n}(Emitter);\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\nmodule.exports = Socket;","map":{"version":3,"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","_Emitter","_inherits","_super","_createSuper","uri","_this","opts","arguments","length","undefined","_classCallCheck","call","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","open","_createClass","key","value","createTransport","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","self","setTimeout","emit","e","shift","setTransport","on","onDrain","packet","onPacket","onError","probe","failed","onTransportOpen","onlyBinaryUpgrades","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","i","l","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","_this2","clearTimeout","autoUnref","unref","splice","writable","write","options","fn","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","pingIntervalTimer","removeEventListener","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"sources":["C:/Users/a/Documents/New folder (3)/mern-social-media-master/client/node_modules/engine.io-client/lib/socket.js"],"sourcesContent":["const transports = require(\"./transports/index\");\nconst Emitter = require(\"component-emitter\");\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\nconst parser = require(\"engine.io-parser\");\nconst parseuri = require(\"parseuri\");\nconst parseqs = require(\"parseqs\");\n\nclass Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts = {}) {\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    this.secure =\n      null != opts.secure\n        ? opts.secure\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname =\n      opts.hostname ||\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port =\n      opts.port ||\n      (typeof location !== \"undefined\" && location.port\n        ? location.port\n        : this.secure\n        ? 443\n        : 80);\n\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n\n    this.opts = Object.assign(\n      {\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        jsonp: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {}\n      },\n      opts\n    );\n\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    }\n\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      addEventListener(\n        \"beforeunload\",\n        () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        },\n        false\n      );\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\");\n        };\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query);\n\n    // append engine.io protocol identifier\n    query.EIO = parser.protocol;\n\n    // transport name\n    query.transport = name;\n\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n\n    const opts = Object.assign(\n      {},\n      this.opts.transportOptions[name],\n      this.opts,\n      {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }\n    );\n\n    debug(\"options: %j\", opts);\n\n    return new transports[name](opts);\n  }\n\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (\n      this.opts.rememberUpgrade &&\n      Socket.priorWebsocketSuccess &&\n      this.transports.indexOf(\"websocket\") !== -1\n    ) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      const self = this;\n      setTimeout(function() {\n        self.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n    const self = this;\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n\n    // set up transport\n    this.transport = transport;\n\n    // set up transport listeners\n    transport\n      .on(\"drain\", function() {\n        self.onDrain();\n      })\n      .on(\"packet\", function(packet) {\n        self.onPacket(packet);\n      })\n      .on(\"error\", function(e) {\n        self.onError(e);\n      })\n      .on(\"close\", function() {\n        self.onClose(\"transport close\");\n      });\n  }\n\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, { probe: 1 });\n    let failed = false;\n    const self = this;\n\n    Socket.priorWebsocketSuccess = false;\n\n    function onTransportOpen() {\n      if (self.onlyBinaryUpgrades) {\n        const upgradeLosesBinary =\n          !this.supportsBinary && self.transport.supportsBinary;\n        failed = failed || upgradeLosesBinary;\n      }\n      if (failed) return;\n\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\n      transport.once(\"packet\", function(msg) {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          self.upgrading = true;\n          self.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n          debug('pausing current transport \"%s\"', self.transport.name);\n          self.transport.pause(function() {\n            if (failed) return;\n            if (\"closed\" === self.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n\n            cleanup();\n\n            self.setTransport(transport);\n            transport.send([{ type: \"upgrade\" }]);\n            self.emit(\"upgrade\", transport);\n            transport = null;\n            self.upgrading = false;\n            self.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          self.emit(\"upgradeError\", err);\n        }\n      });\n    }\n\n    function freezeTransport() {\n      if (failed) return;\n\n      // Any callback called by transport should be ignored since now\n      failed = true;\n\n      cleanup();\n\n      transport.close();\n      transport = null;\n    }\n\n    // Handle any error that happens while probing\n    function onerror(err) {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n\n      freezeTransport();\n\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n      self.emit(\"upgradeError\", error);\n    }\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n\n    // Remove all listeners on the transport and on self\n    function cleanup() {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      self.removeListener(\"close\", onclose);\n      self.removeListener(\"upgrading\", onupgrade);\n    }\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    transport.open();\n  }\n\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api public\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush();\n\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\n      \"open\" === this.readyState &&\n      this.opts.upgrade &&\n      this.transport.pause\n    ) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n      this.emit(\"packet\", packet);\n\n      // Socket is live - any packet counts\n      this.emit(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\n      \"closed\" !== this.readyState &&\n      this.transport.writable &&\n      !this.upgrading &&\n      this.writeBuffer.length\n    ) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n\n  /**\n   * Closes the connection.\n   *\n   * @api private\n   */\n  close() {\n    const self = this;\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", function() {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    function close() {\n      self.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      self.transport.close();\n    }\n\n    function cleanupAndClose() {\n      self.removeListener(\"upgrade\", cleanupAndClose);\n      self.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    }\n\n    function waitForUpgrade() {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      self.once(\"upgrade\", cleanupAndClose);\n      self.once(\"upgradeError\", cleanupAndClose);\n    }\n\n    return this;\n  }\n\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, desc) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket close with reason: \"%s\"', reason);\n      const self = this;\n\n      // clear timers\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer);\n\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n\n      // ensure transport won't stay open\n      this.transport.close();\n\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      }\n\n      // set ready state\n      this.readyState = \"closed\";\n\n      // clear session id\n      this.id = null;\n\n      // emit close event\n      this.emit(\"close\", reason, desc);\n\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      self.writeBuffer = [];\n      self.prevBufferLen = 0;\n    }\n  }\n\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i]))\n        filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\nmodule.exports = Socket;\n"],"mappings":";;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAChD,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC5C,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC,CAAC,yBAAyB,CAAC;AACzD,IAAMG,MAAM,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC1C,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAU,CAAC;AACpC,IAAMK,OAAO,GAAGL,OAAO,CAAC,SAAS,CAAC;AAAC,IAE7BM,MAAM,0BAAAC,QAAA;EAAA;;EAAAC,SAAA,CAAAF,MAAA,EAAAC,QAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,MAAA;EACV;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAAAA,OAAYK,GAAG,EAAa;IAAA,IAAAC,KAAA;IAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAAG,eAAA,OAAAX,MAAA;IACxBM,KAAA,GAAAH,MAAA,CAAAS,IAAA;IAEA,IAAIP,GAAG,IAAI,QAAQ,KAAK,OAAOA,GAAG,EAAE;MAClCE,IAAI,GAAGF,GAAG;MACVA,GAAG,GAAG,IAAI;IACZ;IAEA,IAAIA,GAAG,EAAE;MACPA,GAAG,GAAGP,QAAQ,CAACO,GAAG,CAAC;MACnBE,IAAI,CAACM,QAAQ,GAAGR,GAAG,CAACS,IAAI;MACxBP,IAAI,CAACQ,MAAM,GAAGV,GAAG,CAACW,QAAQ,KAAK,OAAO,IAAIX,GAAG,CAACW,QAAQ,KAAK,KAAK;MAChET,IAAI,CAACU,IAAI,GAAGZ,GAAG,CAACY,IAAI;MACpB,IAAIZ,GAAG,CAACa,KAAK,EAAEX,IAAI,CAACW,KAAK,GAAGb,GAAG,CAACa,KAAK;IACvC,CAAC,MAAM,IAAIX,IAAI,CAACO,IAAI,EAAE;MACpBP,IAAI,CAACM,QAAQ,GAAGf,QAAQ,CAACS,IAAI,CAACO,IAAI,CAAC,CAACA,IAAI;IAC1C;IAEAR,KAAA,CAAKS,MAAM,GACT,IAAI,IAAIR,IAAI,CAACQ,MAAM,GACfR,IAAI,CAACQ,MAAM,GACX,OAAOI,QAAQ,KAAK,WAAW,IAAI,QAAQ,KAAKA,QAAQ,CAACH,QAAQ;IAEvE,IAAIT,IAAI,CAACM,QAAQ,IAAI,CAACN,IAAI,CAACU,IAAI,EAAE;MAC/B;MACAV,IAAI,CAACU,IAAI,GAAGX,KAAA,CAAKS,MAAM,GAAG,KAAK,GAAG,IAAI;IACxC;IAEAT,KAAA,CAAKO,QAAQ,GACXN,IAAI,CAACM,QAAQ,KACZ,OAAOM,QAAQ,KAAK,WAAW,GAAGA,QAAQ,CAACN,QAAQ,GAAG,WAAW,CAAC;IACrEP,KAAA,CAAKW,IAAI,GACPV,IAAI,CAACU,IAAI,KACR,OAAOE,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACF,IAAI,GAC7CE,QAAQ,CAACF,IAAI,GACbX,KAAA,CAAKS,MAAM,GACX,GAAG,GACH,EAAE,CAAC;IAETT,KAAA,CAAKb,UAAU,GAAGc,IAAI,CAACd,UAAU,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC;IAC7Da,KAAA,CAAKc,UAAU,GAAG,EAAE;IACpBd,KAAA,CAAKe,WAAW,GAAG,EAAE;IACrBf,KAAA,CAAKgB,aAAa,GAAG,CAAC;IAEtBhB,KAAA,CAAKC,IAAI,GAAGgB,MAAM,CAACC,MAAM,CACvB;MACEC,IAAI,EAAE,YAAY;MAClBC,KAAK,EAAE,KAAK;MACZC,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE,IAAI;MACXC,cAAc,EAAE,GAAG;MACnBC,eAAe,EAAE,KAAK;MACtBC,kBAAkB,EAAE,IAAI;MACxBC,iBAAiB,EAAE;QACjBC,SAAS,EAAE;MACb,CAAC;MACDC,gBAAgB,EAAE,CAAC;IACrB,CAAC,EACD5B,IAAI,CACL;IAEDD,KAAA,CAAKC,IAAI,CAACkB,IAAI,GAAGnB,KAAA,CAAKC,IAAI,CAACkB,IAAI,CAACW,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG;IAExD,IAAI,OAAO9B,KAAA,CAAKC,IAAI,CAACW,KAAK,KAAK,QAAQ,EAAE;MACvCZ,KAAA,CAAKC,IAAI,CAACW,KAAK,GAAGnB,OAAO,CAACsC,MAAM,CAAC/B,KAAA,CAAKC,IAAI,CAACW,KAAK,CAAC;IACnD;;IAEA;IACAZ,KAAA,CAAKgC,EAAE,GAAG,IAAI;IACdhC,KAAA,CAAKiC,QAAQ,GAAG,IAAI;IACpBjC,KAAA,CAAKkC,YAAY,GAAG,IAAI;IACxBlC,KAAA,CAAKmC,WAAW,GAAG,IAAI;;IAEvB;IACAnC,KAAA,CAAKoC,gBAAgB,GAAG,IAAI;IAE5B,IAAI,OAAOC,gBAAgB,KAAK,UAAU,EAAE;MAC1CA,gBAAgB,CACd,cAAc,EACd,YAAM;QACJ,IAAIrC,KAAA,CAAKsC,SAAS,EAAE;UAClB;UACAtC,KAAA,CAAKsC,SAAS,CAACC,kBAAkB,EAAE;UACnCvC,KAAA,CAAKsC,SAAS,CAACE,KAAK,EAAE;QACxB;MACF,CAAC,EACD,KAAK,CACN;MACD,IAAIxC,KAAA,CAAKO,QAAQ,KAAK,WAAW,EAAE;QACjCP,KAAA,CAAKyC,oBAAoB,GAAG,YAAM;UAChCzC,KAAA,CAAK0C,OAAO,CAAC,iBAAiB,CAAC;QACjC,CAAC;QACDL,gBAAgB,CAAC,SAAS,EAAErC,KAAA,CAAKyC,oBAAoB,EAAE,KAAK,CAAC;MAC/D;IACF;IAEAzC,KAAA,CAAK2C,IAAI,EAAE;IAAC,OAAA3C,KAAA;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE4C,YAAA,CAAAlD,MAAA;IAAAmD,GAAA;IAAAC,KAAA,EAOA,SAAAC,gBAAgBC,IAAI,EAAE;MACpB1D,KAAK,CAAC,yBAAyB,EAAE0D,IAAI,CAAC;MACtC,IAAMpC,KAAK,GAAGqC,KAAK,CAAC,IAAI,CAAChD,IAAI,CAACW,KAAK,CAAC;;MAEpC;MACAA,KAAK,CAACsC,GAAG,GAAG3D,MAAM,CAACmB,QAAQ;;MAE3B;MACAE,KAAK,CAAC0B,SAAS,GAAGU,IAAI;;MAEtB;MACA,IAAI,IAAI,CAAChB,EAAE,EAAEpB,KAAK,CAACuC,GAAG,GAAG,IAAI,CAACnB,EAAE;MAEhC,IAAM/B,IAAI,GAAGgB,MAAM,CAACC,MAAM,CACxB,CAAC,CAAC,EACF,IAAI,CAACjB,IAAI,CAAC4B,gBAAgB,CAACmB,IAAI,CAAC,EAChC,IAAI,CAAC/C,IAAI,EACT;QACEW,KAAK,EAALA,KAAK;QACLwC,MAAM,EAAE,IAAI;QACZ7C,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBE,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBE,IAAI,EAAE,IAAI,CAACA;MACb,CAAC,CACF;MAEDrB,KAAK,CAAC,aAAa,EAAEW,IAAI,CAAC;MAE1B,OAAO,IAAId,UAAU,CAAC6D,IAAI,CAAC,CAAC/C,IAAI,CAAC;IACnC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA4C,GAAA;IAAAC,KAAA,EAKA,SAAAH,KAAA,EAAO;MACL,IAAIL,SAAS;MACb,IACE,IAAI,CAACrC,IAAI,CAACwB,eAAe,IACzB/B,MAAM,CAAC2D,qBAAqB,IAC5B,IAAI,CAAClE,UAAU,CAACmE,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAC3C;QACAhB,SAAS,GAAG,WAAW;MACzB,CAAC,MAAM,IAAI,CAAC,KAAK,IAAI,CAACnD,UAAU,CAACgB,MAAM,EAAE;QACvC;QACA,IAAMoD,IAAI,GAAG,IAAI;QACjBC,UAAU,CAAC,YAAW;UACpBD,IAAI,CAACE,IAAI,CAAC,OAAO,EAAE,yBAAyB,CAAC;QAC/C,CAAC,EAAE,CAAC,CAAC;QACL;MACF,CAAC,MAAM;QACLnB,SAAS,GAAG,IAAI,CAACnD,UAAU,CAAC,CAAC,CAAC;MAChC;MACA,IAAI,CAAC2B,UAAU,GAAG,SAAS;;MAE3B;MACA,IAAI;QACFwB,SAAS,GAAG,IAAI,CAACS,eAAe,CAACT,SAAS,CAAC;MAC7C,CAAC,CAAC,OAAOoB,CAAC,EAAE;QACVpE,KAAK,CAAC,oCAAoC,EAAEoE,CAAC,CAAC;QAC9C,IAAI,CAACvE,UAAU,CAACwE,KAAK,EAAE;QACvB,IAAI,CAAChB,IAAI,EAAE;QACX;MACF;MAEAL,SAAS,CAACK,IAAI,EAAE;MAChB,IAAI,CAACiB,YAAY,CAACtB,SAAS,CAAC;IAC9B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAO,GAAA;IAAAC,KAAA,EAKA,SAAAc,aAAatB,SAAS,EAAE;MACtBhD,KAAK,CAAC,sBAAsB,EAAEgD,SAAS,CAACU,IAAI,CAAC;MAC7C,IAAMO,IAAI,GAAG,IAAI;MAEjB,IAAI,IAAI,CAACjB,SAAS,EAAE;QAClBhD,KAAK,CAAC,gCAAgC,EAAE,IAAI,CAACgD,SAAS,CAACU,IAAI,CAAC;QAC5D,IAAI,CAACV,SAAS,CAACC,kBAAkB,EAAE;MACrC;;MAEA;MACA,IAAI,CAACD,SAAS,GAAGA,SAAS;;MAE1B;MACAA,SAAS,CACNuB,EAAE,CAAC,OAAO,EAAE,YAAW;QACtBN,IAAI,CAACO,OAAO,EAAE;MAChB,CAAC,CAAC,CACDD,EAAE,CAAC,QAAQ,EAAE,UAASE,MAAM,EAAE;QAC7BR,IAAI,CAACS,QAAQ,CAACD,MAAM,CAAC;MACvB,CAAC,CAAC,CACDF,EAAE,CAAC,OAAO,EAAE,UAASH,CAAC,EAAE;QACvBH,IAAI,CAACU,OAAO,CAACP,CAAC,CAAC;MACjB,CAAC,CAAC,CACDG,EAAE,CAAC,OAAO,EAAE,YAAW;QACtBN,IAAI,CAACb,OAAO,CAAC,iBAAiB,CAAC;MACjC,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAG,GAAA;IAAAC,KAAA,EAMA,SAAAoB,MAAMlB,IAAI,EAAE;MACV1D,KAAK,CAAC,wBAAwB,EAAE0D,IAAI,CAAC;MACrC,IAAIV,SAAS,GAAG,IAAI,CAACS,eAAe,CAACC,IAAI,EAAE;QAAEkB,KAAK,EAAE;MAAE,CAAC,CAAC;MACxD,IAAIC,MAAM,GAAG,KAAK;MAClB,IAAMZ,IAAI,GAAG,IAAI;MAEjB7D,MAAM,CAAC2D,qBAAqB,GAAG,KAAK;MAEpC,SAASe,eAAeA,CAAA,EAAG;QACzB,IAAIb,IAAI,CAACc,kBAAkB,EAAE;UAC3B,IAAMC,kBAAkB,GACtB,CAAC,IAAI,CAACC,cAAc,IAAIhB,IAAI,CAACjB,SAAS,CAACiC,cAAc;UACvDJ,MAAM,GAAGA,MAAM,IAAIG,kBAAkB;QACvC;QACA,IAAIH,MAAM,EAAE;QAEZ7E,KAAK,CAAC,6BAA6B,EAAE0D,IAAI,CAAC;QAC1CV,SAAS,CAACkC,IAAI,CAAC,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,IAAI,EAAE;QAAQ,CAAC,CAAC,CAAC;QACjDpC,SAAS,CAACqC,IAAI,CAAC,QAAQ,EAAE,UAASC,GAAG,EAAE;UACrC,IAAIT,MAAM,EAAE;UACZ,IAAI,MAAM,KAAKS,GAAG,CAACH,IAAI,IAAI,OAAO,KAAKG,GAAG,CAACF,IAAI,EAAE;YAC/CpF,KAAK,CAAC,2BAA2B,EAAE0D,IAAI,CAAC;YACxCO,IAAI,CAACsB,SAAS,GAAG,IAAI;YACrBtB,IAAI,CAACE,IAAI,CAAC,WAAW,EAAEnB,SAAS,CAAC;YACjC,IAAI,CAACA,SAAS,EAAE;YAChB5C,MAAM,CAAC2D,qBAAqB,GAAG,WAAW,KAAKf,SAAS,CAACU,IAAI;YAE7D1D,KAAK,CAAC,gCAAgC,EAAEiE,IAAI,CAACjB,SAAS,CAACU,IAAI,CAAC;YAC5DO,IAAI,CAACjB,SAAS,CAACwC,KAAK,CAAC,YAAW;cAC9B,IAAIX,MAAM,EAAE;cACZ,IAAI,QAAQ,KAAKZ,IAAI,CAACzC,UAAU,EAAE;cAClCxB,KAAK,CAAC,+CAA+C,CAAC;cAEtDyF,OAAO,EAAE;cAETxB,IAAI,CAACK,YAAY,CAACtB,SAAS,CAAC;cAC5BA,SAAS,CAACkC,IAAI,CAAC,CAAC;gBAAEC,IAAI,EAAE;cAAU,CAAC,CAAC,CAAC;cACrClB,IAAI,CAACE,IAAI,CAAC,SAAS,EAAEnB,SAAS,CAAC;cAC/BA,SAAS,GAAG,IAAI;cAChBiB,IAAI,CAACsB,SAAS,GAAG,KAAK;cACtBtB,IAAI,CAACyB,KAAK,EAAE;YACd,CAAC,CAAC;UACJ,CAAC,MAAM;YACL1F,KAAK,CAAC,6BAA6B,EAAE0D,IAAI,CAAC;YAC1C,IAAMiC,GAAG,GAAG,IAAIC,KAAK,CAAC,aAAa,CAAC;YACpCD,GAAG,CAAC3C,SAAS,GAAGA,SAAS,CAACU,IAAI;YAC9BO,IAAI,CAACE,IAAI,CAAC,cAAc,EAAEwB,GAAG,CAAC;UAChC;QACF,CAAC,CAAC;MACJ;MAEA,SAASE,eAAeA,CAAA,EAAG;QACzB,IAAIhB,MAAM,EAAE;;QAEZ;QACAA,MAAM,GAAG,IAAI;QAEbY,OAAO,EAAE;QAETzC,SAAS,CAACE,KAAK,EAAE;QACjBF,SAAS,GAAG,IAAI;MAClB;;MAEA;MACA,SAAS8C,OAAOA,CAACH,GAAG,EAAE;QACpB,IAAMI,KAAK,GAAG,IAAIH,KAAK,CAAC,eAAe,GAAGD,GAAG,CAAC;QAC9CI,KAAK,CAAC/C,SAAS,GAAGA,SAAS,CAACU,IAAI;QAEhCmC,eAAe,EAAE;QAEjB7F,KAAK,CAAC,kDAAkD,EAAE0D,IAAI,EAAEiC,GAAG,CAAC;QAEpE1B,IAAI,CAACE,IAAI,CAAC,cAAc,EAAE4B,KAAK,CAAC;MAClC;MAEA,SAASC,gBAAgBA,CAAA,EAAG;QAC1BF,OAAO,CAAC,kBAAkB,CAAC;MAC7B;;MAEA;MACA,SAASG,OAAOA,CAAA,EAAG;QACjBH,OAAO,CAAC,eAAe,CAAC;MAC1B;;MAEA;MACA,SAASI,SAASA,CAACC,EAAE,EAAE;QACrB,IAAInD,SAAS,IAAImD,EAAE,CAACzC,IAAI,KAAKV,SAAS,CAACU,IAAI,EAAE;UAC3C1D,KAAK,CAAC,4BAA4B,EAAEmG,EAAE,CAACzC,IAAI,EAAEV,SAAS,CAACU,IAAI,CAAC;UAC5DmC,eAAe,EAAE;QACnB;MACF;;MAEA;MACA,SAASJ,OAAOA,CAAA,EAAG;QACjBzC,SAAS,CAACoD,cAAc,CAAC,MAAM,EAAEtB,eAAe,CAAC;QACjD9B,SAAS,CAACoD,cAAc,CAAC,OAAO,EAAEN,OAAO,CAAC;QAC1C9C,SAAS,CAACoD,cAAc,CAAC,OAAO,EAAEJ,gBAAgB,CAAC;QACnD/B,IAAI,CAACmC,cAAc,CAAC,OAAO,EAAEH,OAAO,CAAC;QACrChC,IAAI,CAACmC,cAAc,CAAC,WAAW,EAAEF,SAAS,CAAC;MAC7C;MAEAlD,SAAS,CAACqC,IAAI,CAAC,MAAM,EAAEP,eAAe,CAAC;MACvC9B,SAAS,CAACqC,IAAI,CAAC,OAAO,EAAES,OAAO,CAAC;MAChC9C,SAAS,CAACqC,IAAI,CAAC,OAAO,EAAEW,gBAAgB,CAAC;MAEzC,IAAI,CAACX,IAAI,CAAC,OAAO,EAAEY,OAAO,CAAC;MAC3B,IAAI,CAACZ,IAAI,CAAC,WAAW,EAAEa,SAAS,CAAC;MAEjClD,SAAS,CAACK,IAAI,EAAE;IAClB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAE,GAAA;IAAAC,KAAA,EAKA,SAAA6C,OAAA,EAAS;MACPrG,KAAK,CAAC,aAAa,CAAC;MACpB,IAAI,CAACwB,UAAU,GAAG,MAAM;MACxBpB,MAAM,CAAC2D,qBAAqB,GAAG,WAAW,KAAK,IAAI,CAACf,SAAS,CAACU,IAAI;MAClE,IAAI,CAACS,IAAI,CAAC,MAAM,CAAC;MACjB,IAAI,CAACuB,KAAK,EAAE;;MAEZ;MACA;MACA,IACE,MAAM,KAAK,IAAI,CAAClE,UAAU,IAC1B,IAAI,CAACb,IAAI,CAACqB,OAAO,IACjB,IAAI,CAACgB,SAAS,CAACwC,KAAK,EACpB;QACAxF,KAAK,CAAC,yBAAyB,CAAC;QAChC,IAAIsG,CAAC,GAAG,CAAC;QACT,IAAMC,CAAC,GAAG,IAAI,CAAC5D,QAAQ,CAAC9B,MAAM;QAC9B,OAAOyF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UACjB,IAAI,CAAC1B,KAAK,CAAC,IAAI,CAACjC,QAAQ,CAAC2D,CAAC,CAAC,CAAC;QAC9B;MACF;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA/C,GAAA;IAAAC,KAAA,EAKA,SAAAkB,SAASD,MAAM,EAAE;MACf,IACE,SAAS,KAAK,IAAI,CAACjD,UAAU,IAC7B,MAAM,KAAK,IAAI,CAACA,UAAU,IAC1B,SAAS,KAAK,IAAI,CAACA,UAAU,EAC7B;QACAxB,KAAK,CAAC,sCAAsC,EAAEyE,MAAM,CAACU,IAAI,EAAEV,MAAM,CAACW,IAAI,CAAC;QAEvE,IAAI,CAACjB,IAAI,CAAC,QAAQ,EAAEM,MAAM,CAAC;;QAE3B;QACA,IAAI,CAACN,IAAI,CAAC,WAAW,CAAC;QAEtB,QAAQM,MAAM,CAACU,IAAI;UACjB,KAAK,MAAM;YACT,IAAI,CAACqB,WAAW,CAACC,IAAI,CAACC,KAAK,CAACjC,MAAM,CAACW,IAAI,CAAC,CAAC;YACzC;UAEF,KAAK,MAAM;YACT,IAAI,CAACuB,gBAAgB,EAAE;YACvB,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC;YACvB,IAAI,CAACzC,IAAI,CAAC,MAAM,CAAC;YACjB;UAEF,KAAK,OAAO;YACV,IAAMwB,GAAG,GAAG,IAAIC,KAAK,CAAC,cAAc,CAAC;YACrCD,GAAG,CAACkB,IAAI,GAAGpC,MAAM,CAACW,IAAI;YACtB,IAAI,CAACT,OAAO,CAACgB,GAAG,CAAC;YACjB;UAEF,KAAK,SAAS;YACZ,IAAI,CAACxB,IAAI,CAAC,MAAM,EAAEM,MAAM,CAACW,IAAI,CAAC;YAC9B,IAAI,CAACjB,IAAI,CAAC,SAAS,EAAEM,MAAM,CAACW,IAAI,CAAC;YACjC;QAAM;MAEZ,CAAC,MAAM;QACLpF,KAAK,CAAC,6CAA6C,EAAE,IAAI,CAACwB,UAAU,CAAC;MACvE;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA+B,GAAA;IAAAC,KAAA,EAMA,SAAAgD,YAAYpB,IAAI,EAAE;MAChB,IAAI,CAACjB,IAAI,CAAC,WAAW,EAAEiB,IAAI,CAAC;MAC5B,IAAI,CAAC1C,EAAE,GAAG0C,IAAI,CAACvB,GAAG;MAClB,IAAI,CAACb,SAAS,CAAC1B,KAAK,CAACuC,GAAG,GAAGuB,IAAI,CAACvB,GAAG;MACnC,IAAI,CAAClB,QAAQ,GAAG,IAAI,CAACmE,cAAc,CAAC1B,IAAI,CAACzC,QAAQ,CAAC;MAClD,IAAI,CAACC,YAAY,GAAGwC,IAAI,CAACxC,YAAY;MACrC,IAAI,CAACC,WAAW,GAAGuC,IAAI,CAACvC,WAAW;MACnC,IAAI,CAACwD,MAAM,EAAE;MACb;MACA,IAAI,QAAQ,KAAK,IAAI,CAAC7E,UAAU,EAAE;MAClC,IAAI,CAACmF,gBAAgB,EAAE;IACzB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAApD,GAAA;IAAAC,KAAA,EAKA,SAAAmD,iBAAA,EAAmB;MAAA,IAAAI,MAAA;MACjBC,YAAY,CAAC,IAAI,CAAClE,gBAAgB,CAAC;MACnC,IAAI,CAACA,gBAAgB,GAAGoB,UAAU,CAAC,YAAM;QACvC6C,MAAI,CAAC3D,OAAO,CAAC,cAAc,CAAC;MAC9B,CAAC,EAAE,IAAI,CAACR,YAAY,GAAG,IAAI,CAACC,WAAW,CAAC;MACxC,IAAI,IAAI,CAAClC,IAAI,CAACsG,SAAS,EAAE;QACvB,IAAI,CAACnE,gBAAgB,CAACoE,KAAK,EAAE;MAC/B;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA3D,GAAA;IAAAC,KAAA,EAKA,SAAAgB,QAAA,EAAU;MACR,IAAI,CAAC/C,WAAW,CAAC0F,MAAM,CAAC,CAAC,EAAE,IAAI,CAACzF,aAAa,CAAC;;MAE9C;MACA;MACA;MACA,IAAI,CAACA,aAAa,GAAG,CAAC;MAEtB,IAAI,CAAC,KAAK,IAAI,CAACD,WAAW,CAACZ,MAAM,EAAE;QACjC,IAAI,CAACsD,IAAI,CAAC,OAAO,CAAC;MACpB,CAAC,MAAM;QACL,IAAI,CAACuB,KAAK,EAAE;MACd;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAnC,GAAA;IAAAC,KAAA,EAKA,SAAAkC,MAAA,EAAQ;MACN,IACE,QAAQ,KAAK,IAAI,CAAClE,UAAU,IAC5B,IAAI,CAACwB,SAAS,CAACoE,QAAQ,IACvB,CAAC,IAAI,CAAC7B,SAAS,IACf,IAAI,CAAC9D,WAAW,CAACZ,MAAM,EACvB;QACAb,KAAK,CAAC,+BAA+B,EAAE,IAAI,CAACyB,WAAW,CAACZ,MAAM,CAAC;QAC/D,IAAI,CAACmC,SAAS,CAACkC,IAAI,CAAC,IAAI,CAACzD,WAAW,CAAC;QACrC;QACA;QACA,IAAI,CAACC,aAAa,GAAG,IAAI,CAACD,WAAW,CAACZ,MAAM;QAC5C,IAAI,CAACsD,IAAI,CAAC,OAAO,CAAC;MACpB;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAZ,GAAA;IAAAC,KAAA,EASA,SAAA6D,MAAM/B,GAAG,EAAEgC,OAAO,EAAEC,EAAE,EAAE;MACtB,IAAI,CAACX,UAAU,CAAC,SAAS,EAAEtB,GAAG,EAAEgC,OAAO,EAAEC,EAAE,CAAC;MAC5C,OAAO,IAAI;IACb;EAAC;IAAAhE,GAAA;IAAAC,KAAA,EAED,SAAA0B,KAAKI,GAAG,EAAEgC,OAAO,EAAEC,EAAE,EAAE;MACrB,IAAI,CAACX,UAAU,CAAC,SAAS,EAAEtB,GAAG,EAAEgC,OAAO,EAAEC,EAAE,CAAC;MAC5C,OAAO,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAhE,GAAA;IAAAC,KAAA,EASA,SAAAoD,WAAWzB,IAAI,EAAEC,IAAI,EAAEkC,OAAO,EAAEC,EAAE,EAAE;MAClC,IAAI,UAAU,KAAK,OAAOnC,IAAI,EAAE;QAC9BmC,EAAE,GAAGnC,IAAI;QACTA,IAAI,GAAGtE,SAAS;MAClB;MAEA,IAAI,UAAU,KAAK,OAAOwG,OAAO,EAAE;QACjCC,EAAE,GAAGD,OAAO;QACZA,OAAO,GAAG,IAAI;MAChB;MAEA,IAAI,SAAS,KAAK,IAAI,CAAC9F,UAAU,IAAI,QAAQ,KAAK,IAAI,CAACA,UAAU,EAAE;QACjE;MACF;MAEA8F,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvBA,OAAO,CAACE,QAAQ,GAAG,KAAK,KAAKF,OAAO,CAACE,QAAQ;MAE7C,IAAM/C,MAAM,GAAG;QACbU,IAAI,EAAEA,IAAI;QACVC,IAAI,EAAEA,IAAI;QACVkC,OAAO,EAAEA;MACX,CAAC;MACD,IAAI,CAACnD,IAAI,CAAC,cAAc,EAAEM,MAAM,CAAC;MACjC,IAAI,CAAChD,WAAW,CAACgG,IAAI,CAAChD,MAAM,CAAC;MAC7B,IAAI8C,EAAE,EAAE,IAAI,CAAClC,IAAI,CAAC,OAAO,EAAEkC,EAAE,CAAC;MAC9B,IAAI,CAAC7B,KAAK,EAAE;IACd;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAnC,GAAA;IAAAC,KAAA,EAKA,SAAAN,MAAA,EAAQ;MACN,IAAMe,IAAI,GAAG,IAAI;MAEjB,IAAI,SAAS,KAAK,IAAI,CAACzC,UAAU,IAAI,MAAM,KAAK,IAAI,CAACA,UAAU,EAAE;QAC/D,IAAI,CAACA,UAAU,GAAG,SAAS;QAE3B,IAAI,IAAI,CAACC,WAAW,CAACZ,MAAM,EAAE;UAC3B,IAAI,CAACwE,IAAI,CAAC,OAAO,EAAE,YAAW;YAC5B,IAAI,IAAI,CAACE,SAAS,EAAE;cAClBmC,cAAc,EAAE;YAClB,CAAC,MAAM;cACLxE,KAAK,EAAE;YACT;UACF,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,IAAI,CAACqC,SAAS,EAAE;UACzBmC,cAAc,EAAE;QAClB,CAAC,MAAM;UACLxE,KAAK,EAAE;QACT;MACF;MAEA,SAASA,KAAKA,CAAA,EAAG;QACfe,IAAI,CAACb,OAAO,CAAC,cAAc,CAAC;QAC5BpD,KAAK,CAAC,6CAA6C,CAAC;QACpDiE,IAAI,CAACjB,SAAS,CAACE,KAAK,EAAE;MACxB;MAEA,SAASyE,eAAeA,CAAA,EAAG;QACzB1D,IAAI,CAACmC,cAAc,CAAC,SAAS,EAAEuB,eAAe,CAAC;QAC/C1D,IAAI,CAACmC,cAAc,CAAC,cAAc,EAAEuB,eAAe,CAAC;QACpDzE,KAAK,EAAE;MACT;MAEA,SAASwE,cAAcA,CAAA,EAAG;QACxB;QACAzD,IAAI,CAACoB,IAAI,CAAC,SAAS,EAAEsC,eAAe,CAAC;QACrC1D,IAAI,CAACoB,IAAI,CAAC,cAAc,EAAEsC,eAAe,CAAC;MAC5C;MAEA,OAAO,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAApE,GAAA;IAAAC,KAAA,EAKA,SAAAmB,QAAQgB,GAAG,EAAE;MACX3F,KAAK,CAAC,iBAAiB,EAAE2F,GAAG,CAAC;MAC7BvF,MAAM,CAAC2D,qBAAqB,GAAG,KAAK;MACpC,IAAI,CAACI,IAAI,CAAC,OAAO,EAAEwB,GAAG,CAAC;MACvB,IAAI,CAACvC,OAAO,CAAC,iBAAiB,EAAEuC,GAAG,CAAC;IACtC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAApC,GAAA;IAAAC,KAAA,EAKA,SAAAJ,QAAQwE,MAAM,EAAEC,IAAI,EAAE;MACpB,IACE,SAAS,KAAK,IAAI,CAACrG,UAAU,IAC7B,MAAM,KAAK,IAAI,CAACA,UAAU,IAC1B,SAAS,KAAK,IAAI,CAACA,UAAU,EAC7B;QACAxB,KAAK,CAAC,gCAAgC,EAAE4H,MAAM,CAAC;QAC/C,IAAM3D,IAAI,GAAG,IAAI;;QAEjB;QACA+C,YAAY,CAAC,IAAI,CAACc,iBAAiB,CAAC;QACpCd,YAAY,CAAC,IAAI,CAAClE,gBAAgB,CAAC;;QAEnC;QACA,IAAI,CAACE,SAAS,CAACC,kBAAkB,CAAC,OAAO,CAAC;;QAE1C;QACA,IAAI,CAACD,SAAS,CAACE,KAAK,EAAE;;QAEtB;QACA,IAAI,CAACF,SAAS,CAACC,kBAAkB,EAAE;QAEnC,IAAI,OAAO8E,mBAAmB,KAAK,UAAU,EAAE;UAC7CA,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC5E,oBAAoB,EAAE,KAAK,CAAC;QAClE;;QAEA;QACA,IAAI,CAAC3B,UAAU,GAAG,QAAQ;;QAE1B;QACA,IAAI,CAACkB,EAAE,GAAG,IAAI;;QAEd;QACA,IAAI,CAACyB,IAAI,CAAC,OAAO,EAAEyD,MAAM,EAAEC,IAAI,CAAC;;QAEhC;QACA;QACA5D,IAAI,CAACxC,WAAW,GAAG,EAAE;QACrBwC,IAAI,CAACvC,aAAa,GAAG,CAAC;MACxB;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA6B,GAAA;IAAAC,KAAA,EAOA,SAAAsD,eAAenE,QAAQ,EAAE;MACvB,IAAMqF,gBAAgB,GAAG,EAAE;MAC3B,IAAI1B,CAAC,GAAG,CAAC;MACT,IAAM2B,CAAC,GAAGtF,QAAQ,CAAC9B,MAAM;MACzB,OAAOyF,CAAC,GAAG2B,CAAC,EAAE3B,CAAC,EAAE,EAAE;QACjB,IAAI,CAAC,IAAI,CAACzG,UAAU,CAACmE,OAAO,CAACrB,QAAQ,CAAC2D,CAAC,CAAC,CAAC,EACvC0B,gBAAgB,CAACP,IAAI,CAAC9E,QAAQ,CAAC2D,CAAC,CAAC,CAAC;MACtC;MACA,OAAO0B,gBAAgB;IACzB;EAAC;EAAA,OAAA5H,MAAA;AAAA,EAtpBkBL,OAAO;AAypB5BK,MAAM,CAAC2D,qBAAqB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;;AAEA3D,MAAM,CAACgB,QAAQ,GAAGnB,MAAM,CAACmB,QAAQ,CAAC,CAAC;;AAEnC,SAASuC,KAAKA,CAACuE,GAAG,EAAE;EAClB,IAAMC,CAAC,GAAG,CAAC,CAAC;EACZ,KAAK,IAAI7B,CAAC,IAAI4B,GAAG,EAAE;IACjB,IAAIA,GAAG,CAACE,cAAc,CAAC9B,CAAC,CAAC,EAAE;MACzB6B,CAAC,CAAC7B,CAAC,CAAC,GAAG4B,GAAG,CAAC5B,CAAC,CAAC;IACf;EACF;EACA,OAAO6B,CAAC;AACV;AAEAE,MAAM,CAACC,OAAO,GAAGlI,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}